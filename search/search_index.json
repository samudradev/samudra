{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dokumentasi Samudra","text":"<p>Samudra (\u0633\u0627\u0645\u0648\u062f\u0631\u0627) ialah sebuah aplikasi untuk memudahkan pencatatan istilah serta pengongsiannya. Dengan memudahkan proses ini, jumlah rujukan bahasa Melayu dalam talian dapat ditingkatkan sekaligus menggalakkan perkembangannya dari segi penggunaan, penyelidikan serta pembelajarannya.</p> <p>Nama 'samudra' diambil sempena perkataan 'samudera' yang bererti lautan bagi menggambarkan kosa kata seluas lautan.</p> <p></p>"},{"location":"gui/","title":"Apliklasi bergrafik","text":"<p>Aplikasi bergrafik ditulis secara berasingan di https://github.com/samudradev/samudra-gui dan bergandingan dengan pembangunan repo teras iaitu https://github.com/samudradev/samudra.</p> <p></p>"},{"location":"model/","title":"Model Samudra","text":"<p>Sebuah <code>model</code> samudra merujuk kepada objek atau <code>class</code> yang dipadankan dengan jadual dalam pangkalan data. Pemadanan dan interaksi dengan pangkalan data diuruskan oleh pakej peewee dan berperanan mentakrifkan bentuk data serta hubungkait sesama data.</p> <p>Setiap model tersimpan dalam direktori <code>samudra/models</code> dan mewarisi <code>BaseModel</code> yang mempunyai dua medan asasi: <code>id</code> dan <code>tarikh_masuk</code>.</p>"},{"location":"model/#data-kamus","title":"Data Kamus","text":""},{"location":"model/#model-utama","title":"Model Utama","text":"<p>Buat masa ini terdapat 4 model yang berfungsi memegang data kata-kata:</p> <ol> <li>Lemma</li> <li>Konsep</li> <li>Cakupan</li> <li>KataAsing</li> </ol> <p>Hubungkait antara setiap model digambarkan sebegini:</p> <p></p>"},{"location":"model/#model-pengantara","title":"Model Pengantara","text":"<p>Model <code>Cakupan</code> dan <code>KataAsing</code> bersambungan dengan <code>Konsep</code> secara padanan banyak kepada banyak. Oleh itu, perlunya ada model pengantara yang memegang data perhubungan tersebut:</p> <ol> <li>CakupanXKonsep</li> <li>KataAsingXKonsep</li> </ol>"},{"location":"model/#rujukan","title":"Rujukan","text":"<p>Maklumat lanjut boleh rujuk <code>Models</code></p>"},{"location":"teras/","title":"Teknologi Teras","text":"<p>Berikut merupakan teknologi teras yang menggerakkan Samudra dari dalam:</p> <ol> <li>Python ^3.8<ul> <li>Teras Samudra ditulis dalam bahasa Python.</li> </ul> </li> <li>Peewee ^3.15.1<ul> <li>Peewee membantu Samudra berinteraksi dengan pangkalan data.      Setiap data yang dipetik dari pangkalan data dibentuk sebagai satu <code>model</code>.</li> </ul> </li> <li>Pydantic ^1.9.1<ul> <li>Pydantic membantu Samudra membentuk data dalam cara yang difahami oleh aplikasi yang berada di luar teras.</li> </ul> </li> </ol> <p>Secara asasnya, beginilah carta alir data dalam sebuah aplikasi Samudra:</p> <pre><code>flowchart LR\nsubgraph APP [\"Samudra\"]\n    direction LR\n    PW[Peewee]\n    PYD[Pydantic]\nend\nsubgraph WEB [\"Aplikasi\"]\n   direction TB\n   CLIENT[Pelanggan]\nend\nSQL_DB[(Pangkalan Data)]\n\nPYD &lt;--&gt; PW\nPW &lt;--&gt; SQL_DB\nCLIENT &lt;--&gt; PYD</code></pre>"},{"location":"reference/SUMMARY/","title":"Ringkasan","text":"<ul> <li>conf<ul> <li>database<ul> <li>core</li> <li>options</li> </ul> </li> <li>local</li> <li>setup</li> </ul> </li> <li>interfaces</li> <li>models<ul> <li>auth<ul> <li>pengguna</li> </ul> </li> <li>base</li> <li>core<ul> <li>cakupan</li> <li>kata_asing</li> <li>konsep</li> <li>lemma</li> </ul> </li> <li>experimental<ul> <li>petikan</li> </ul> </li> </ul> </li> <li>schemas</li> </ul>"},{"location":"reference/interfaces/","title":"Interfaces","text":"<p>External applications are expected to interact with classes and functions defined here.</p>"},{"location":"reference/interfaces/#samudra.interfaces--schemas","title":"Schemas","text":"<p>The module contains data schemas for use by external application</p> <ul> <li>LemmaData</li> <li>KonsepData</li> <li>CakupanData</li> <li>KataAsingData</li> <li>GolonganKataData</li> </ul>"},{"location":"reference/interfaces/#samudra.interfaces--builders","title":"Builders","text":"<p>The module also contains data builders for use by external application</p> <ul> <li>LemmaQueryBuilder</li> <li>NewLemmaBuilder</li> </ul>"},{"location":"reference/interfaces/#samudra.interfaces.LemmaQueryBuilder","title":"<code>LemmaQueryBuilder</code>","text":"<p>A query builder to fetch lemma data and its relationships.</p> <p>Important</p> <p>If <code>lemma</code> and <code>konsep</code> is both <code>None</code>, it will raise a <code>ValueError</code>.</p> <p>Parameters:</p> Name Type Description Default <code>lemma</code> <code>Optional[str]</code> <p>The lemma to match to. Defaults to None.</p> <code>None</code> <code>konsep</code> <code>Optional[str]</code> <p>The query contains these words in the konsep. Defaults to None.</p> <code>None</code> Source code in <code>samudra/interfaces.py</code> <pre><code>class LemmaQueryBuilder:\n\"\"\"A query builder to fetch lemma data and its relationships.\n    !!! important\n        If `lemma` and `konsep` is both `None`, it will raise a `ValueError`.\n    Args:\n        lemma (Optional[str], optional): The lemma to match to. Defaults to None.\n        konsep (Optional[str], optional): The query contains these words in the konsep. Defaults to None.\n    \"\"\"\n_query_stmt = models.Lemma.select()\ndef __init__(\nself, *, lemma: Optional[str] = None, konsep: Optional[str] = None\n) -&gt; None:\nif (lemma == None) and (konsep == None):\nwhereclause = None\nraise ValueError(\nf\"Please specify query. `lemma` dan `konsep` cannot both be None.\"\n)\nelif lemma and konsep:\nwhereclause = models.Lemma.nama.contains(\nlemma\n) or models.Konsep.keterangan.contains(konsep)\nelif lemma:\nwhereclause = models.Lemma.nama.contains(lemma)\nelif konsep:\nwhereclause = models.Konsep.keterangan.contains(konsep)\nself._query_stmt = (\nself._query_stmt.join_from(models.Lemma, models.Konsep, JOIN.LEFT_OUTER)\n.where(whereclause)\n.join_from(models.Konsep, models.GolonganKata, JOIN.LEFT_OUTER)\n)\ndef get_cakupan(self) -&gt; \"LemmaQueryBuilder\":\n\"\"\"Fetch related `cakupan`.\n        Returns:\n            LemmaQueryBuilder: Returns self to continue building the query\n        \"\"\"\nself._query_stmt = self._query_stmt.join_from(\nmodels.Konsep, models.CakupanXKonsep, JOIN.LEFT_OUTER\n).join(models.Cakupan, JOIN.LEFT_OUTER)\nreturn self\ndef get_kata_asing(self) -&gt; \"LemmaQueryBuilder\":\n\"\"\"Fetch related `kata_asing`.\n        Returns:\n            LemmaQueryBuilder: Returns self to continue building the query\n        \"\"\"\nself._query_stmt = self._query_stmt.join_from(\nmodels.Konsep, models.KataAsingXKonsep, JOIN.LEFT_OUTER\n).join(models.KataAsing, JOIN.LEFT_OUTER)\nreturn self\ndef collect(self) -&gt; Optional[LemmaData]:\n\"\"\"Execute the query\n        Returns:\n            Optional[LemmaData]: Returns None if data matching query does not exist.\n        \"\"\"\ntry:\nreturn LemmaData.from_orm(pw.prefetch(self._query_stmt.get()))\nexcept pw.DoesNotExist:\nreturn None\n</code></pre>"},{"location":"reference/interfaces/#samudra.interfaces.LemmaQueryBuilder.collect","title":"<code>collect()</code>","text":"<p>Execute the query</p> <p>Returns:</p> Type Description <code>Optional[LemmaData]</code> <p>Optional[LemmaData]: Returns None if data matching query does not exist.</p> Source code in <code>samudra/interfaces.py</code> <pre><code>def collect(self) -&gt; Optional[LemmaData]:\n\"\"\"Execute the query\n    Returns:\n        Optional[LemmaData]: Returns None if data matching query does not exist.\n    \"\"\"\ntry:\nreturn LemmaData.from_orm(pw.prefetch(self._query_stmt.get()))\nexcept pw.DoesNotExist:\nreturn None\n</code></pre>"},{"location":"reference/interfaces/#samudra.interfaces.LemmaQueryBuilder.get_cakupan","title":"<code>get_cakupan()</code>","text":"<p>Fetch related <code>cakupan</code>.</p> <p>Returns:</p> Name Type Description <code>LemmaQueryBuilder</code> <code>LemmaQueryBuilder</code> <p>Returns self to continue building the query</p> Source code in <code>samudra/interfaces.py</code> <pre><code>def get_cakupan(self) -&gt; \"LemmaQueryBuilder\":\n\"\"\"Fetch related `cakupan`.\n    Returns:\n        LemmaQueryBuilder: Returns self to continue building the query\n    \"\"\"\nself._query_stmt = self._query_stmt.join_from(\nmodels.Konsep, models.CakupanXKonsep, JOIN.LEFT_OUTER\n).join(models.Cakupan, JOIN.LEFT_OUTER)\nreturn self\n</code></pre>"},{"location":"reference/interfaces/#samudra.interfaces.LemmaQueryBuilder.get_kata_asing","title":"<code>get_kata_asing()</code>","text":"<p>Fetch related <code>kata_asing</code>.</p> <p>Returns:</p> Name Type Description <code>LemmaQueryBuilder</code> <code>LemmaQueryBuilder</code> <p>Returns self to continue building the query</p> Source code in <code>samudra/interfaces.py</code> <pre><code>def get_kata_asing(self) -&gt; \"LemmaQueryBuilder\":\n\"\"\"Fetch related `kata_asing`.\n    Returns:\n        LemmaQueryBuilder: Returns self to continue building the query\n    \"\"\"\nself._query_stmt = self._query_stmt.join_from(\nmodels.Konsep, models.KataAsingXKonsep, JOIN.LEFT_OUTER\n).join(models.KataAsing, JOIN.LEFT_OUTER)\nreturn self\n</code></pre>"},{"location":"reference/interfaces/#samudra.interfaces.NewLemmaBuilder","title":"<code>NewLemmaBuilder</code>","text":"<p>A builder to insert new lemma and its related data</p> <p>Parameters:</p> Name Type Description Default <code>lemma</code> <code>str</code> <p>lemma name</p> required <code>konsep</code> <code>str</code> <p>konsep detail</p> required <code>golongan</code> <code>str</code> <p>existing GolonganKata</p> required Source code in <code>samudra/interfaces.py</code> <pre><code>class NewLemmaBuilder:\n\"\"\"A builder to insert new lemma and its related data\n    Args:\n        lemma (str): lemma name\n        konsep (str): konsep detail\n        golongan (str): existing [GolonganKata][samudra.models.core.konsep.GolonganKata]\n    \"\"\"\ndef __init__(self, konsep: str, lemma: str, golongan: str) -&gt; None:\nself.lemma = get_or_init_record(models.Lemma, nama=lemma)\nself.golongan = models.GolonganKata.get(id=golongan)\nself.konsep = get_or_init_record(\nmodels.Konsep, lemma=self.lemma, golongan=self.golongan, keterangan=konsep\n)\nself.to_save: List[pw.Model] = [self.lemma, self.golongan, self.konsep]\ndef save(self) -&gt; None:\n\"\"\"Saves the built record.\"\"\"\nwhile len(self.to_save) != 0:\nrecord = self.to_save.pop(0)\nrecord.update()  # Fill previously NULL values\nrecord.save()\ndef set_cakupan(self, nama: str) -&gt; \"NewLemmaBuilder\":\n\"\"\"Attach the cakupan with the following nama\n        Args:\n            nama (str): cakupan name\n        Returns:\n            NewLemmaBuilder: Returns self to continue building\n        \"\"\"\nself.cakupan = get_or_init_record(models.Cakupan, nama=nama)\nself.cakupan_x_konsep = get_or_init_record(\nmodels.CakupanXKonsep, cakupan=self.cakupan, konsep=self.konsep\n)\nself.to_save.extend([self.cakupan, self.cakupan_x_konsep])\nreturn self\ndef set_kata_asing(self, nama: str, bahasa: str) -&gt; \"NewLemmaBuilder\":\n\"\"\"Attach the kata_asing with the following description\n        Args:\n            nama (str): foreign word\n            bahasa (str): language of the word\n        Returns:\n            NewLemmaBuilder: Returns self to continue building\n        \"\"\"\nself.kata_asing = get_or_init_record(models.KataAsing, nama=nama, bahasa=bahasa)\nself.kata_asing_x_konsep = get_or_init_record(\nmodels.KataAsingXKonsep, kata_asing=self.cakupan, konsep=self.konsep\n)\nself.to_save.extend([self.kata_asing, self.kata_asing_x_konsep])\nreturn self\n</code></pre>"},{"location":"reference/interfaces/#samudra.interfaces.NewLemmaBuilder.save","title":"<code>save()</code>","text":"<p>Saves the built record.</p> Source code in <code>samudra/interfaces.py</code> <pre><code>def save(self) -&gt; None:\n\"\"\"Saves the built record.\"\"\"\nwhile len(self.to_save) != 0:\nrecord = self.to_save.pop(0)\nrecord.update()  # Fill previously NULL values\nrecord.save()\n</code></pre>"},{"location":"reference/interfaces/#samudra.interfaces.NewLemmaBuilder.set_cakupan","title":"<code>set_cakupan(nama)</code>","text":"<p>Attach the cakupan with the following nama</p> <p>Parameters:</p> Name Type Description Default <code>nama</code> <code>str</code> <p>cakupan name</p> required <p>Returns:</p> Name Type Description <code>NewLemmaBuilder</code> <code>NewLemmaBuilder</code> <p>Returns self to continue building</p> Source code in <code>samudra/interfaces.py</code> <pre><code>def set_cakupan(self, nama: str) -&gt; \"NewLemmaBuilder\":\n\"\"\"Attach the cakupan with the following nama\n    Args:\n        nama (str): cakupan name\n    Returns:\n        NewLemmaBuilder: Returns self to continue building\n    \"\"\"\nself.cakupan = get_or_init_record(models.Cakupan, nama=nama)\nself.cakupan_x_konsep = get_or_init_record(\nmodels.CakupanXKonsep, cakupan=self.cakupan, konsep=self.konsep\n)\nself.to_save.extend([self.cakupan, self.cakupan_x_konsep])\nreturn self\n</code></pre>"},{"location":"reference/interfaces/#samudra.interfaces.NewLemmaBuilder.set_kata_asing","title":"<code>set_kata_asing(nama, bahasa)</code>","text":"<p>Attach the kata_asing with the following description</p> <p>Parameters:</p> Name Type Description Default <code>nama</code> <code>str</code> <p>foreign word</p> required <code>bahasa</code> <code>str</code> <p>language of the word</p> required <p>Returns:</p> Name Type Description <code>NewLemmaBuilder</code> <code>NewLemmaBuilder</code> <p>Returns self to continue building</p> Source code in <code>samudra/interfaces.py</code> <pre><code>def set_kata_asing(self, nama: str, bahasa: str) -&gt; \"NewLemmaBuilder\":\n\"\"\"Attach the kata_asing with the following description\n    Args:\n        nama (str): foreign word\n        bahasa (str): language of the word\n    Returns:\n        NewLemmaBuilder: Returns self to continue building\n    \"\"\"\nself.kata_asing = get_or_init_record(models.KataAsing, nama=nama, bahasa=bahasa)\nself.kata_asing_x_konsep = get_or_init_record(\nmodels.KataAsingXKonsep, kata_asing=self.cakupan, konsep=self.konsep\n)\nself.to_save.extend([self.kata_asing, self.kata_asing_x_konsep])\nreturn self\n</code></pre>"},{"location":"reference/interfaces/#samudra.interfaces.get_or_init_record","title":"<code>get_or_init_record(model, *args, **kwargs)</code>","text":"<p>Gets a record or initializes a new one without saving</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>pw.Model</code> <p>A model</p> required <p>Returns:</p> Type Description <code>pw.Model</code> <p>pw.Model: Model instance</p> Source code in <code>samudra/interfaces.py</code> <pre><code>def get_or_init_record(model: pw.Model, *args, **kwargs) -&gt; pw.Model:\n\"\"\"Gets a record or initializes a new one without saving\n    Args:\n        model (pw.Model): A model\n    Returns:\n        pw.Model: Model instance\n    \"\"\"\nif data := model.get_or_none(*args, **kwargs) is None:\ndata = model(*args, **kwargs)\nreturn data\n</code></pre>"},{"location":"reference/schemas/","title":"Schemas","text":""},{"location":"reference/schemas/#samudra.schemas--schema-of-a-lemma","title":"Schema of a Lemma","text":"<p>If we look at LemmaData as a single JSON object, it looks like this:</p> <p><pre><code>lemma: {\nid: int nama: str\nkonsep: [\n{\nid: int\nketerangan: str\ntertib: *int\ngolongan: {\nid: str\nnama: str\nketerangan: str\n}\ncakupan: [\n*{\ncakupan: {\nid: int\nnama: str\nketerangan: *str\n}\n} ...\n]\nkata_asing: [\n*{\nkata_asing: {\nid: int\nnama: str\nbahasa: str\n}\n} ...\n]\n} ...\n]\n}\n</code></pre> where <code>*</code> at the beginning of the type represents optional values and <code>[{} ...]</code> represents a list of objects.</p>"},{"location":"reference/schemas/#samudra.schemas.CakupanData","title":"<code>CakupanData</code>","text":"<p>         Bases: <code>FromPeeweeDatabase</code></p> <p>Object and JSONable representation of models.Cakupan</p> keys value type id int nama str keterangan str (optional) Source code in <code>samudra/schemas.py</code> <pre><code>class CakupanData(FromPeeweeDatabase):\n\"\"\"Object and JSONable representation of [models.Cakupan][samudra.models.core.cakupan.Cakupan]\n    | keys  | value type    |\n    | :---: | :---:         |\n    | id    | int |\n    | nama  | str |\n    | keterangan | str (optional) |\n    \"\"\"\nid: int\nnama: str\nketerangan: Optional[str]\n</code></pre>"},{"location":"reference/schemas/#samudra.schemas.FromPeeweeDatabase","title":"<code>FromPeeweeDatabase</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The base class of all the schemas which enables the inheriting objects to be able to understand and validate peewee Models</p> Source code in <code>samudra/schemas.py</code> <pre><code>class FromPeeweeDatabase(BaseModel):\n\"\"\"The base class of all the schemas which enables the inheriting objects to be able to understand and validate [peewee Models][samudra.models.base.BaseDataTable]\"\"\"\nclass Config:\norm_mode = True\ngetter_dict = _PeeweeGetterDict\n</code></pre>"},{"location":"reference/schemas/#samudra.schemas.GolonganKataData","title":"<code>GolonganKataData</code>","text":"<p>         Bases: <code>FromPeeweeDatabase</code></p> <p>Object and JSONable representation of models.GolonganKata</p> keys value type id str nama str keterangan str Source code in <code>samudra/schemas.py</code> <pre><code>class GolonganKataData(FromPeeweeDatabase):\n\"\"\"Object and JSONable representation of [models.GolonganKata][samudra.models.core.konsep.GolonganKata]\n    | keys  | value type    |\n    | :---: | :---:         |\n    | id    | str |\n    | nama  | str |\n    | keterangan | str |\n    \"\"\"\nid: str\nnama: str\nketerangan: str\n</code></pre>"},{"location":"reference/schemas/#samudra.schemas.KataAsingData","title":"<code>KataAsingData</code>","text":"<p>         Bases: <code>FromPeeweeDatabase</code></p> <p>Object and JSONable representation of models.KataAsing</p> keys value type id int nama str bahasa str Source code in <code>samudra/schemas.py</code> <pre><code>class KataAsingData(FromPeeweeDatabase):\n\"\"\"Object and JSONable representation of [models.KataAsing][samudra.models.core.kata_asing.KataAsing]\n    | keys  | value type    |\n    | :---: | :---:         |\n    | id    | int |\n    | nama  | str |\n    | bahasa | str |\n    \"\"\"\nid: int\nnama: str\nbahasa: str\n</code></pre>"},{"location":"reference/schemas/#samudra.schemas.KonsepData","title":"<code>KonsepData</code>","text":"<p>         Bases: <code>FromPeeweeDatabase</code></p> <p>Object and JSONable representation of models.Konsep.</p> <p>Important</p> <p>Because of the way the models have been set up, to get a single <code>cakupan</code> from <code>konsep</code> (Self) would be like so: <pre><code>first_cakupan: CakupanData = Self.cakupan[0].cakupan\n</code></pre> It would seem like we are selecting <code>cakupan</code> twice but in fact we are first selecting a list of intermediate tables defined by models.BaseAttachmentDataTable. We then index into it (or iterate to get all) to reveal a data from models.Cakupan table. The same can be said to find <code>kata_asing</code>.</p> <p>## Schema of a Lemma gives a clearer picture of the data structure.</p> keys value type id int keterangan str tertib int (Optional) golongan GolonganKataData cakupan List[KonsepToCakupanConnector] kata_asing List[KonsepToKataAsingConnector] Source code in <code>samudra/schemas.py</code> <pre><code>class KonsepData(FromPeeweeDatabase):\n\"\"\"Object and JSONable representation of [models.Konsep][samudra.models.core.konsep.Konsep].\n    !!! important\n        Because of the way the models have been set up, to get a single `cakupan` from `konsep` (Self) would be like so:\n        ```python\n        first_cakupan: CakupanData = Self.cakupan[0].cakupan\n        ```\n        It would seem like we are selecting `cakupan` twice but in fact we are first selecting a list of intermediate tables defined by [models.BaseAttachmentDataTable][samudra.models.base.BaseAttachmentDataTable].\n        We then index into it (or iterate to get all) to reveal a data from [models.Cakupan][samudra.models.core.cakupan.Cakupan] table.\n        The same can be said to find `kata_asing`.\n        [## Schema of a Lemma][samudra.schemas--schema-of-a-lemma] gives a clearer picture of the data structure.\n    | keys  | value type    |\n    | :---: | :---:         |\n    | id    | int |\n    | keterangan  | str |\n    | tertib | int (Optional) |\n    | golongan  | [GolonganKataData][samudra.schemas.GolonganKataData] |\n    | cakupan    | List[[KonsepToCakupanConnector][samudra.schemas.KonsepToCakupanConnector]] |\n    | kata_asing    | List[[KonsepToKataAsingConnector][samudra.schemas.KonsepToKataAsingConnector]] |\n    \"\"\"\nid: int\ngolongan: GolonganKataData\nketerangan: str\ntertib: Optional[int]\ncakupan: List[Optional[KonsepToCakupanConnector]]\nkata_asing: List[Optional[KataAsingData]]\n</code></pre>"},{"location":"reference/schemas/#samudra.schemas.KonsepToCakupanConnector","title":"<code>KonsepToCakupanConnector</code>","text":"<p>         Bases: <code>FromPeeweeDatabase</code></p> <p>Object and JSONable representation of models.CakupanXKonsep with the exception that it is a one way connection.</p> <p>Note</p> <p>The connection has to be set up one way to avoid circular dependencies</p> keys value type cakupan CakupanData Source code in <code>samudra/schemas.py</code> <pre><code>class KonsepToCakupanConnector(FromPeeweeDatabase):\n\"\"\"Object and JSONable representation of [models.CakupanXKonsep][samudra.models.core.cakupan.CakupanXKonsep] with the exception that it is a one way connection.\n    !!! note\n        The connection has to be set up one way to avoid circular dependencies\n    | keys  | value type    |\n    | :---: | :---:         |\n    | cakupan    | [CakupanData][samudra.schemas.CakupanData] |\n    \"\"\"\ncakupan: CakupanData\n</code></pre>"},{"location":"reference/schemas/#samudra.schemas.KonsepToKataAsingConnector","title":"<code>KonsepToKataAsingConnector</code>","text":"<p>         Bases: <code>FromPeeweeDatabase</code></p> <p>Object and JSONable representation of models.KataAsingXKonsep with the exception that it is a one way connection.</p> <p>Note</p> <p>The connection has to be set up one way to avoid circular dependencies</p> keys value type kata_asing KataAsingData Source code in <code>samudra/schemas.py</code> <pre><code>class KonsepToKataAsingConnector(FromPeeweeDatabase):\n\"\"\"Object and JSONable representation of [models.KataAsingXKonsep][samudra.models.core.kata_asing.KataAsingXKonsep] with the exception that it is a one way connection.\n    !!! note\n        The connection has to be set up one way to avoid circular dependencies\n    | keys  | value type    |\n    | :---: | :---:         |\n    | kata_asing    | [KataAsingData][samudra.schemas.KataAsingData] |\n    \"\"\"\nkata_asing: KataAsingData\n</code></pre>"},{"location":"reference/schemas/#samudra.schemas.LemmaData","title":"<code>LemmaData</code>","text":"<p>         Bases: <code>FromPeeweeDatabase</code></p> <p>Object and JSONable representation of models.Lemma</p> keys value type id int nama str konsep List[KonsepData] Source code in <code>samudra/schemas.py</code> <pre><code>class LemmaData(FromPeeweeDatabase):\n\"\"\"Object and JSONable representation of [models.Lemma][samudra.models.core.lemma.Lemma]\n    | keys  | value type    |\n    | :---: | :---:         |\n    | id    | int |\n    | nama  | str |\n    | konsep    | List[[KonsepData][samudra.schemas.KonsepData]] |\n    \"\"\"\nid: int\nnama: str\nkonsep: List[KonsepData]\n</code></pre>"},{"location":"reference/conf/","title":"Konfig","text":"<p>Module to organize configurations.</p> <p>Info</p> <p>TODO Documentation</p>"},{"location":"reference/conf/local/","title":"Local","text":""},{"location":"reference/conf/setup/","title":"Setup","text":""},{"location":"reference/conf/database/","title":"Index","text":""},{"location":"reference/conf/database/core/","title":"Core","text":""},{"location":"reference/conf/database/core/#samudra.conf.database.core.SQLiteConnectionState","title":"<code>SQLiteConnectionState</code>","text":"<p>         Bases: <code>pw._ConnectionState</code></p> <p>Defaults to make SQLite DB async-compatible (according to FastAPI/Pydantic)</p> Source code in <code>samudra/conf/database/core.py</code> <pre><code>class SQLiteConnectionState(pw._ConnectionState):\n\"\"\"Defaults to make SQLite DB async-compatible (according to FastAPI/Pydantic)\"\"\"\ndef __init__(self, **kwargs):\nsuper().__setattr__(\"_state\", db_state)\nsuper().__init__(**kwargs)\ndef __setattr__(self, name, value):\nself._state.get()[name] = value\ndef __getattr__(self, name):\nreturn self._state.get()[name]\n</code></pre>"},{"location":"reference/conf/database/core/#samudra.conf.database.core.get_database","title":"<code>get_database(name)</code>","text":"<p>Returns the connection class based on the name.</p> Source code in <code>samudra/conf/database/core.py</code> <pre><code>def get_database(name: str) -&gt; pw.Database:\n\"\"\"Returns the connection class based on the name.\"\"\"\ninfo = read_database_info(name)\nif info.get(\"engine\") == DatabaseEngine.SQLite:\nreturn_db = pw.SqliteDatabase(info.get(\"path\"), check_same_thread=False)\nreturn_db._state = SQLiteConnectionState()\nreturn return_db\nif info.get(\"engine\") == DatabaseEngine.MySQL:\nreturn pw.MySQLDatabase(info.get(\"path\"))\n</code></pre>"},{"location":"reference/conf/database/core/#samudra.conf.database.core.new_database","title":"<code>new_database(name, engine, path)</code>","text":"<p>Create and register a SQLite database or just register a database if not SQLite</p> Source code in <code>samudra/conf/database/core.py</code> <pre><code>def new_database(name: str, engine: DatabaseEngine, path: str) -&gt; pw.Database:\n\"\"\"Create and register a SQLite database or just register a database if not SQLite\"\"\"\n# ? Should this be a function parameters?\nDATABASE_HOST = os.getenv(\"DATABASE_HOST\")\nDATABASE_PORT = int(os.getenv(\"DATABASE_PORT\"))\nDATABASE_OPTIONS = os.getenv(\"DATABASE_OPTIONS\")\nUSERNAME = os.getenv(\"DATABASE_USERNAME\")\nPASSWORD = os.getenv(\"DATABASE_PASSWORD\")\nSSL_MODE = os.getenv(\"SSL_MODE\")\nif engine is None or engine not in DatabaseEngine.__members__.values():\nraise ValueError(\n\"Invalid engine. You entered {}. Valid values are: \\n - {}\".format(\nengine, \"\\n - \".join(DatabaseEngine.__members__.values())\n)\n)\nif engine == DatabaseEngine.SQLite:\nreturn create_sqlite(name=name, path=Path(path))\nif engine == DatabaseEngine.MySQL:\nconn_str = f\"mysql://{USERNAME}:{PASSWORD}@{DATABASE_HOST}:{DATABASE_PORT}/{name}?ssl-mode=REQUIRED\"\nreturn_db = pw.MySQLDatabase(conn_str)\nappend_database_list(name=name, path=conn_str, engine=engine)\nlogging.info(f\"Connecting to {return_db.database} as {USERNAME}\")\nelse:\nraise NotImplementedError(\"Invalid engine\")\n</code></pre>"},{"location":"reference/conf/database/core/#samudra.conf.database.core.set_active_database","title":"<code>set_active_database(name)</code>","text":"<p>Sets the database as the currently active database</p> Source code in <code>samudra/conf/database/core.py</code> <pre><code>def set_active_database(name: str) -&gt; None:\n\"\"\"Sets the database as the currently active database\"\"\"\n# Check if the name is already registered in .samudra/databases.toml\ndb_obj = read_database_info(name=name)\nif db_obj is None:\nraise FileNotFoundError(\nf\"The database name `{name}` is not found. Perhaps it is not created yet.\"\n)\n# Write the info in .samudra/config.toml\nwrite_config({\"active\": name})\n</code></pre>"},{"location":"reference/conf/database/options/","title":"Options","text":""},{"location":"reference/models/","title":"Model","text":"<p>Module that contains SQL Tables known as models.</p> <ul> <li>\ud83c\udfe0 Base</li> <li>\ud83d\udca1 Core</li> <li>\ud83d\udd10 Auth</li> <li>\ud83e\uddea Experimental</li> </ul>"},{"location":"reference/models/base/","title":"Base","text":"<p>File that contains Base Models that is to be inherited by all models.</p> <p>The four bases currently available:</p> <ul> <li>BaseDataTable</li> <li>BaseRelationshipTable</li> <li>BaseAttachmentDataTable</li> <li>BaseStrictDataTable</li> </ul>"},{"location":"reference/models/base/#samudra.models.base.BaseAttachmentDataTable","title":"<code>BaseAttachmentDataTable</code>","text":"<p>         Bases: <code>BaseDataTable</code></p> <p>Model to hold attachment data that has a many-to-many relationship with the primary data.</p> Source code in <code>samudra/models/base.py</code> <pre><code>class BaseAttachmentDataTable(BaseDataTable):\n\"\"\"Model to hold attachment data that has a many-to-many relationship with the primary data.\"\"\"\n\"The [`BaseRelationshipTable`] that holds the relationship with the primary data.\"\n@classmethod\ndef connects_to(cls, other: BaseDataTable, through: BaseRelationshipTable) -&gt; None:\n\"\"\"Create a dict that defines connection with [data][samudra.models.base.BaseDataTable] and its [relationship table][samudra.models.base.BaseAttachmentDataTable]\n        Args:\n            other (BaseDataTable): The data to attach the connection\n            through (BaseRelationshipTable): The bridge that holds the many-to-many connections\n        \"\"\"\ncls.connection_table: Dict[str, BaseRelationshipTable] = defaultdict(\nBaseRelationshipTable\n)\ncls.connection_table[other._meta.table_name] = through\n@classmethod\ndef __attach__(\ncls, other: BaseDataTable, values: List[Dict[str, str]]\n) -&gt; pw.ModelSelect:\n\"\"\"A custom dunder method to attach a single row of attachment data to the primary data.\n        Is expected to be used when a `other.attach(cls, *args, *kwargs)` method is called.\n        Args:\n            other (BaseDataTable): An instance of the primary data.\n            values (List[Dict[field, value]]): A field:value pair related to this class.\n        Raises:\n            AttributeError: Raised when the connection table is not set.\n        Returns:\n            pw.ModelSelect: A list of rows of this table associated with `other`.\n        \"\"\"\nrows = [cls.get_or_create(**value)[0] for value in values]\nfor row in rows:\ntry:\ncls.connection_table[other._meta.table_name].get_or_create(\n**{cls._meta.table_name: row.id, other._meta.table_name: other.id}\n)\nexcept AttributeError:\nraise AttributeError(f\"{cls} has no associated connection table\")\nexcept KeyError:\nraise KeyError(f\"{cls} has not defined a connection with {other}\")\nreturn getattr(other, cls._meta.table_name)\n@classmethod\ndef with_dependencies(cls) -&gt; Tuple[Type[BaseDataTable], ...]:\n\"\"\"List itself and dependencies tables.\"\"\"\n# TODO Add ways to programmatically define dependencies\nreturn cls, *cls.connection_table.values()\n</code></pre>"},{"location":"reference/models/base/#samudra.models.base.BaseAttachmentDataTable.__attach__","title":"<code>__attach__(other, values)</code>  <code>classmethod</code>","text":"<p>A custom dunder method to attach a single row of attachment data to the primary data. Is expected to be used when a <code>other.attach(cls, *args, *kwargs)</code> method is called.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>BaseDataTable</code> <p>An instance of the primary data.</p> required <code>values</code> <code>List[Dict[field, value]]</code> <p>A field:value pair related to this class.</p> required <p>Raises:</p> Type Description <code>AttributeError</code> <p>Raised when the connection table is not set.</p> <p>Returns:</p> Type Description <code>pw.ModelSelect</code> <p>pw.ModelSelect: A list of rows of this table associated with <code>other</code>.</p> Source code in <code>samudra/models/base.py</code> <pre><code>@classmethod\ndef __attach__(\ncls, other: BaseDataTable, values: List[Dict[str, str]]\n) -&gt; pw.ModelSelect:\n\"\"\"A custom dunder method to attach a single row of attachment data to the primary data.\n    Is expected to be used when a `other.attach(cls, *args, *kwargs)` method is called.\n    Args:\n        other (BaseDataTable): An instance of the primary data.\n        values (List[Dict[field, value]]): A field:value pair related to this class.\n    Raises:\n        AttributeError: Raised when the connection table is not set.\n    Returns:\n        pw.ModelSelect: A list of rows of this table associated with `other`.\n    \"\"\"\nrows = [cls.get_or_create(**value)[0] for value in values]\nfor row in rows:\ntry:\ncls.connection_table[other._meta.table_name].get_or_create(\n**{cls._meta.table_name: row.id, other._meta.table_name: other.id}\n)\nexcept AttributeError:\nraise AttributeError(f\"{cls} has no associated connection table\")\nexcept KeyError:\nraise KeyError(f\"{cls} has not defined a connection with {other}\")\nreturn getattr(other, cls._meta.table_name)\n</code></pre>"},{"location":"reference/models/base/#samudra.models.base.BaseAttachmentDataTable.connects_to","title":"<code>connects_to(other, through)</code>  <code>classmethod</code>","text":"<p>Create a dict that defines connection with data and its relationship table</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>BaseDataTable</code> <p>The data to attach the connection</p> required <code>through</code> <code>BaseRelationshipTable</code> <p>The bridge that holds the many-to-many connections</p> required Source code in <code>samudra/models/base.py</code> <pre><code>@classmethod\ndef connects_to(cls, other: BaseDataTable, through: BaseRelationshipTable) -&gt; None:\n\"\"\"Create a dict that defines connection with [data][samudra.models.base.BaseDataTable] and its [relationship table][samudra.models.base.BaseAttachmentDataTable]\n    Args:\n        other (BaseDataTable): The data to attach the connection\n        through (BaseRelationshipTable): The bridge that holds the many-to-many connections\n    \"\"\"\ncls.connection_table: Dict[str, BaseRelationshipTable] = defaultdict(\nBaseRelationshipTable\n)\ncls.connection_table[other._meta.table_name] = through\n</code></pre>"},{"location":"reference/models/base/#samudra.models.base.BaseAttachmentDataTable.with_dependencies","title":"<code>with_dependencies()</code>  <code>classmethod</code>","text":"<p>List itself and dependencies tables.</p> Source code in <code>samudra/models/base.py</code> <pre><code>@classmethod\ndef with_dependencies(cls) -&gt; Tuple[Type[BaseDataTable], ...]:\n\"\"\"List itself and dependencies tables.\"\"\"\n# TODO Add ways to programmatically define dependencies\nreturn cls, *cls.connection_table.values()\n</code></pre>"},{"location":"reference/models/base/#samudra.models.base.BaseDataTable","title":"<code>BaseDataTable</code>","text":"<p>         Bases: <code>pw.Model</code></p> <p>The simplest type of data model. All other models derive from this model including other base models.</p>"},{"location":"reference/models/base/#samudra.models.base.BaseDataTable--fields","title":"Fields","text":"<ul> <li><code>id</code> (AutoField): the unique id of the data<ul> <li>primary_key: True</li> </ul> </li> <li><code>tarikh_masuk</code> (TimestampField): the time it enters the database</li> </ul>"},{"location":"reference/models/base/#samudra.models.base.BaseDataTable--meta","title":"Meta","text":"<p>Meta is subclass of <code>BaseDataTable</code> to hold metadata</p>"},{"location":"reference/models/base/#samudra.models.base.BaseDataTable--attrmeta","title":"Attr(Meta)","text":"<ul> <li><code>legacy_table_names</code> (bool): The naming scheme of models in SQL Tables.     Set to <code>False</code>, so that <code>CamelCase</code> model classnames are converted into <code>camel_case</code> table names in the database.     (If set to <code>True</code>,<code>CamelCase</code> \u27a1 <code>camelcase</code>)</li> </ul> Source code in <code>samudra/models/base.py</code> <pre><code>class BaseDataTable(pw.Model):\n\"\"\"The simplest type of data model.\n    All other models derive from this model including other base models.\n    ## Fields\n    - `id` (AutoField): the unique id of the data\n        * primary_key: True\n    - `tarikh_masuk` (TimestampField): the time it enters the database\n    ## Meta\n    Meta is subclass of [`BaseDataTable`][samudra.models.base.BaseDataTable] to hold metadata\n    ### Attr(Meta)\n    - `legacy_table_names` (bool): The naming scheme of models in SQL Tables.\n        Set to `False`, so that `CamelCase` model classnames are converted into `camel_case` table names in the database.\n        (If set to `True`,`CamelCase` \u27a1 `camelcase`)\n    \"\"\"\nid = pw.AutoField(primary_key=True)\ntarikh_masuk = pw.TimestampField()\nclass Meta:\nlegacy_table_names = False\ndatabase = database_proxy\n</code></pre>"},{"location":"reference/models/base/#samudra.models.base.BaseRelationshipTable","title":"<code>BaseRelationshipTable</code>","text":"<p>         Bases: <code>BaseDataTable</code></p> <p>Model to hold many-to-many relationships. Model classes are named <code>ModelAXModelB</code> where     <code>ModelA</code> is any <code>BaseAttachmentDataTable</code> and     <code>ModelB</code> is any <code>BaseDataTable</code>.</p> Source code in <code>samudra/models/base.py</code> <pre><code>class BaseRelationshipTable(BaseDataTable):\n\"\"\"Model to hold many-to-many relationships.\n    Model classes are named `ModelAXModelB` where\n        `ModelA` is any [`BaseAttachmentDataTable`][samudra.models.base.BaseAttachmentDataTable] and\n        `ModelB` is any [`BaseDataTable`][samudra.models.base.BaseDataTable].\n    \"\"\"\n</code></pre>"},{"location":"reference/models/base/#samudra.models.base.BaseStrictDataTable","title":"<code>BaseStrictDataTable</code>","text":"<p>         Bases: <code>BaseDataTable</code></p> <p>Model to hold finitely defined data.</p> Source code in <code>samudra/models/base.py</code> <pre><code>class BaseStrictDataTable(BaseDataTable):\n\"\"\"Model to hold finitely defined data.\"\"\"\n@classmethod\ndef get_or_create(cls, *args, **kwargs) -&gt; None:\n\"\"\"Overrides the default `cls.get_or_create()` method to render it unusable.\n        A finitely defined data must be explicitly defined.\n        Raises:\n            AttributeError: This method should not be used by the inheriting model.\n        \"\"\"\nraise AttributeError(\nf\"{cls} is a strict table. Rows can only be created explicitly by the `Model.create` method.\"\n)\n</code></pre>"},{"location":"reference/models/base/#samudra.models.base.BaseStrictDataTable.get_or_create","title":"<code>get_or_create(*args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Overrides the default <code>cls.get_or_create()</code> method to render it unusable. A finitely defined data must be explicitly defined.</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>This method should not be used by the inheriting model.</p> Source code in <code>samudra/models/base.py</code> <pre><code>@classmethod\ndef get_or_create(cls, *args, **kwargs) -&gt; None:\n\"\"\"Overrides the default `cls.get_or_create()` method to render it unusable.\n    A finitely defined data must be explicitly defined.\n    Raises:\n        AttributeError: This method should not be used by the inheriting model.\n    \"\"\"\nraise AttributeError(\nf\"{cls} is a strict table. Rows can only be created explicitly by the `Model.create` method.\"\n)\n</code></pre>"},{"location":"reference/models/auth/","title":"Index","text":"<p>Module containing models necessary for user authentication.</p> <p>Warning</p> <p>Server mode is currently not in development but is planned for the future. Commit a703c1c contains related auth functions.</p> <ul> <li>\ud83d\udc6a Pengguna</li> </ul>"},{"location":"reference/models/auth/pengguna/","title":"Pengguna","text":""},{"location":"reference/models/auth/pengguna/#samudra.models.auth.pengguna.Keizinan","title":"<code>Keizinan</code>","text":"<p>         Bases: <code>BaseStrictDataTable</code></p> <p>Role model for controlling access types</p>"},{"location":"reference/models/auth/pengguna/#samudra.models.auth.pengguna.Keizinan--fields","title":"Fields","text":"<ul> <li><code>peranan</code> (TextField): name of role<ul> <li>null: False</li> <li>unique: True</li> </ul> </li> <li><code>tambah</code> (BooleanField): can create<ul> <li>null: False</li> </ul> </li> <li><code>baca</code> (BooleanField): can read<ul> <li>null: False</li> </ul> </li> <li><code>ubah</code> (BooleanField): can update<ul> <li>null: False</li> </ul> </li> <li><code>buang</code> (BooleanField): can delete<ul> <li>null: False</li> </ul> </li> </ul> Source code in <code>samudra/models/auth/pengguna.py</code> <pre><code>class Keizinan(BaseStrictDataTable):\n\"\"\"Role model for controlling access types\n    ## Fields\n    - `peranan` (TextField): name of role\n        * null: False\n        * unique: True\n    - `tambah` (BooleanField): can create\n        * null: False\n    - `baca` (BooleanField): can read\n        * null: False\n    - `ubah` (BooleanField): can update\n        * null: False\n    - `buang` (BooleanField): can delete\n        * null: False\n    \"\"\"\nperanan = TextField(null=False, unique=True)\ntambah = BooleanField(null=False)\nbaca = BooleanField(null=False)\nubah = BooleanField(null=False)\nbuang = BooleanField(null=False)\n</code></pre>"},{"location":"reference/models/auth/pengguna/#samudra.models.auth.pengguna.Pengguna","title":"<code>Pengguna</code>","text":"<p>         Bases: <code>BaseDataTable</code></p> <p>User model to store users.</p>"},{"location":"reference/models/auth/pengguna/#samudra.models.auth.pengguna.Pengguna--fields","title":"Fields","text":"<ul> <li><code>nama</code> (TextField): username<ul> <li>null: False</li> </ul> </li> <li><code>kunci</code> (TextField): hashed password<ul> <li>null: False</li> </ul> </li> <li><code>peranan</code> (ForeignKeyField): foreign key to <code>Keizinan</code><ul> <li>field: Keizinan.peranan</li> <li>backref: Keizinan.pengguna</li> <li>on delete: set default</li> <li>default: <code>RoleEnum.DEFAULT</code></li> </ul> </li> </ul> Source code in <code>samudra/models/auth/pengguna.py</code> <pre><code>class Pengguna(BaseDataTable):\n\"\"\"User model to store users.\n    ## Fields\n    - `nama` (TextField): username\n        * null: False\n    - `kunci` (TextField): hashed password\n        * null: False\n    - `peranan` (ForeignKeyField): foreign key to [`Keizinan`][samudra.models.auth.pengguna.Keizinan]\n        * field: Keizinan.peranan\n        * backref: Keizinan.pengguna\n        * on delete: set default\n        * default: [`RoleEnum.DEFAULT`][samudra.models.auth.pengguna.RoleEnum]\n    \"\"\"\nnama = TextField(null=False)\nkunci = TextField(null=False)\nperanan = ForeignKeyField(\nmodel=Keizinan,\nfield=Keizinan.peranan,\nbackref=\"pengguna\",\non_delete=\"set default\",\ndefault=RoleEnum.DEFAULT.value,\n)\ndef __repr__(self) -&gt; str:\nreturn f\"&lt;model.{self.__class__.__name__}: id={self.id} nama={self.nama} kunci={self.kunci}&gt;\"\n</code></pre>"},{"location":"reference/models/auth/pengguna/#samudra.models.auth.pengguna.RoleEnum","title":"<code>RoleEnum</code>","text":"<p>         Bases: <code>enum.Enum</code></p> <p>List of Roles</p>"},{"location":"reference/models/auth/pengguna/#samudra.models.auth.pengguna.RoleEnum--values","title":"Values","text":"<ul> <li><code>DEFAULT</code> = 'BIASA'</li> <li><code>ADMIN</code> = 'ADMIN'</li> </ul> Source code in <code>samudra/models/auth/pengguna.py</code> <pre><code>class RoleEnum(enum.Enum):\n\"\"\"List of Roles\n    ## Values\n    - `DEFAULT` = 'BIASA'\n    - `ADMIN` = 'ADMIN'\n    \"\"\"\nDEFAULT = \"BIASA\"\nADMIN = \"ADMIN\"\n</code></pre>"},{"location":"reference/models/core/","title":"Index","text":"<p>Submodules that contains core models necessary to represent linguistic data.</p> <ul> <li>Lemma</li> <li>Konsep</li> <li>Kata_Asing</li> <li>Cakupan</li> </ul>"},{"location":"reference/models/core/cakupan/","title":"Cakupan","text":""},{"location":"reference/models/core/cakupan/#samudra.models.core.cakupan.Cakupan","title":"<code>Cakupan</code>","text":"<p>         Bases: <code>BaseAttachmentDataTable</code></p> <p>Context model to attach to meaning from <code>Konsep</code> via <code>CakupanXKonsep</code>.</p>"},{"location":"reference/models/core/cakupan/#samudra.models.core.cakupan.Cakupan--fields","title":"Fields","text":"<ul> <li><code>nama</code> (TextField): the context name<ul> <li>null: False</li> <li>unique: True</li> </ul> </li> <li><code>keterangan</code> (TextField): the description of the context<ul> <li>null: True</li> </ul> </li> </ul>"},{"location":"reference/models/core/cakupan/#samudra.models.core.cakupan.Cakupan--attrs","title":"Attrs","text":"<ul> <li><code>connection_table</code> (<code>BaseRelationshipTable</code>): <code>CakupanXKonsep</code></li> </ul> Source code in <code>samudra/models/core/cakupan.py</code> <pre><code>class Cakupan(BaseAttachmentDataTable):\n\"\"\"Context model to attach to meaning from [`Konsep`][samudra.models.core.konsep.Konsep] via [`CakupanXKonsep`][samudra.models.core.cakupan.CakupanXKonsep].\n    ## Fields\n    - `nama` (TextField): the context name\n        * null: False\n        * unique: True\n    - `keterangan` (TextField): the description of the context\n        * null: True\n    ## Attrs\n    - `connection_table` ([`BaseRelationshipTable`][samudra.models.base.BaseRelationshipTable]): [`CakupanXKonsep`][samudra.models.core.cakupan.CakupanXKonsep]\n    \"\"\"\nnama = TextField(null=False, unique=True)\nketerangan = TextField(null=True)\n</code></pre>"},{"location":"reference/models/core/cakupan/#samudra.models.core.cakupan.CakupanXKonsep","title":"<code>CakupanXKonsep</code>","text":"<p>         Bases: <code>BaseRelationshipTable</code></p> <p>A many-to-many relationship between <code>Cakupan</code> and <code>Konsep</code>.</p>"},{"location":"reference/models/core/cakupan/#samudra.models.core.cakupan.CakupanXKonsep--fields","title":"Fields","text":"<ul> <li><code>cakupan</code> (ForeignKeyField): foreign key to <code>Cakupan</code>.<ul> <li>field: <code>Cakupan.id</code></li> <li>backref: <code>Cakupan.konsep</code></li> <li>on delete: cascade</li> </ul> </li> <li><code>konsep</code> (ForeignKeyField): foreign key to <code>konsep</code>.<ul> <li>field: <code>Konsep.id</code></li> <li>backref: <code>Konsep.cakupan</code></li> <li>on delete: cascade</li> </ul> </li> </ul> Source code in <code>samudra/models/core/cakupan.py</code> <pre><code>class CakupanXKonsep(BaseRelationshipTable):\n\"\"\"A many-to-many relationship between [`Cakupan`][samudra.models.core.cakupan.Cakupan] and [`Konsep`][samudra.models.core.konsep.Konsep].\n    ## Fields\n    - `cakupan` (ForeignKeyField): foreign key to [`Cakupan`][samudra.models.core.cakupan.Cakupan].\n        * field: `Cakupan.id`\n        * backref: `Cakupan.konsep`\n        * on delete: cascade\n    - `konsep` (ForeignKeyField): foreign key to [`konsep`][samudra.models.core.konsep.Konsep].\n        * field: `Konsep.id`\n        * backref: `Konsep.cakupan`\n        * on delete: cascade\n    \"\"\"\ncakupan = ForeignKeyField(\nmodel=Cakupan, field=Cakupan.id, backref=\"konsep\", on_delete=\"cascade\"\n)\nkonsep = ForeignKeyField(\nmodel=Konsep, field=Konsep.id, backref=\"cakupan\", on_delete=\"cascade\"\n)\n</code></pre>"},{"location":"reference/models/core/kata_asing/","title":"Kata asing","text":""},{"location":"reference/models/core/kata_asing/#samudra.models.core.kata_asing.KataAsing","title":"<code>KataAsing</code>","text":"<p>         Bases: <code>BaseAttachmentDataTable</code></p> <p>Foreign Word model to attach to meaning from <code>Konsep</code> via <code>KataAsingXKonsep</code>.</p>"},{"location":"reference/models/core/kata_asing/#samudra.models.core.kata_asing.KataAsing--field","title":"Field","text":"<ul> <li><code>nama</code> (TextField): the word<ul> <li>null: False</li> </ul> </li> <li><code>bahasa</code> (TextField): the language the word belongs to</li> </ul>"},{"location":"reference/models/core/kata_asing/#samudra.models.core.kata_asing.KataAsing--attr","title":"Attr","text":"<ul> <li><code>connection_table</code> (<code>BaseRelationshipTable</code>) = <code>KataAsingXKonsep</code></li> </ul> Source code in <code>samudra/models/core/kata_asing.py</code> <pre><code>class KataAsing(BaseAttachmentDataTable):\n\"\"\"Foreign Word model to attach to meaning from [`Konsep`][samudra.models.core.konsep.Konsep] via [`KataAsingXKonsep`][samudra.models.core.kata_asing.KataAsingXKonsep].\n    ## Field\n    - `nama` (TextField): the word\n        * null: False\n    - `bahasa` (TextField): the language the word belongs to\n    ## Attr\n    - `connection_table` ([`BaseRelationshipTable`][samudra.models.base.BaseRelationshipTable]) = [`KataAsingXKonsep`][samudra.models.core.kata_asing.KataAsingXKonsep]\n    \"\"\"\nnama = TextField(null=False)\nbahasa = TextField(null=False)\n</code></pre>"},{"location":"reference/models/core/kata_asing/#samudra.models.core.kata_asing.KataAsingXKonsep","title":"<code>KataAsingXKonsep</code>","text":"<p>         Bases: <code>BaseRelationshipTable</code></p> <p>A many-to-many relationship between <code>KataAsing</code> and <code>Konsep</code>.</p>"},{"location":"reference/models/core/kata_asing/#samudra.models.core.kata_asing.KataAsingXKonsep--fields","title":"Fields","text":"<ul> <li><code>KataAsing</code> (ForeignKeyField): foreign key to <code>KataAsing</code>.<ul> <li>field: <code>KataAsing.id</code></li> <li>backref: <code>KataAsing.konsep</code></li> <li>on delete: cascade</li> </ul> </li> <li><code>konsep</code> (ForeignKeyField): foreign key to <code>konsep</code>.<ul> <li>field: <code>Konsep.id</code></li> <li>backref: <code>Konsep.kata_asing</code></li> <li>on delete: cascade</li> </ul> </li> </ul> Source code in <code>samudra/models/core/kata_asing.py</code> <pre><code>class KataAsingXKonsep(BaseRelationshipTable):\n\"\"\"A many-to-many relationship between [`KataAsing`][samudra.models.core.kata_asing.KataAsing] and [`Konsep`][samudra.models.core.konsep.Konsep].\n    ## Fields\n    - `KataAsing` (ForeignKeyField): foreign key to [`KataAsing`][samudra.models.core.kata_asing.KataAsing].\n        * field: `KataAsing.id`\n        * backref: `KataAsing.konsep`\n        * on delete: cascade\n    - `konsep` (ForeignKeyField): foreign key to [`konsep`][samudra.models.core.konsep.Konsep].\n        * field: `Konsep.id`\n        * backref: `Konsep.kata_asing`\n        * on delete: cascade\n    \"\"\"\nkata_asing = ForeignKeyField(\nKataAsing, field=KataAsing.id, backref=\"konsep\", on_delete=\"cascade\"\n)\nkonsep = ForeignKeyField(\nKonsep, field=Konsep.id, backref=\"kata_asing\", on_delete=\"cascade\"\n)\n</code></pre>"},{"location":"reference/models/core/konsep/","title":"Konsep","text":""},{"location":"reference/models/core/konsep/#samudra.models.core.konsep.GolonganKata","title":"<code>GolonganKata</code>","text":"<p>         Bases: <code>BaseStrictDataTable</code></p> <p>Word Class model such as nouns, verbs, etc.</p>"},{"location":"reference/models/core/konsep/#samudra.models.core.konsep.GolonganKata--fields","title":"Fields:","text":"<ul> <li><code>id</code> (CharField): Short Name to identify the Word Class<ul> <li>max length: 6</li> <li>unique: True</li> <li>null: False</li> </ul> </li> <li><code>nama</code> (TextField): Full name</li> <li><code>keterangan</code> (TextField): Description of word class</li> </ul> Source code in <code>samudra/models/core/konsep.py</code> <pre><code>class GolonganKata(BaseStrictDataTable):\n\"\"\"Word Class model such as nouns, verbs, etc.\n    ## Fields:\n    - `id` (CharField): Short Name to identify the Word Class\n        * max length: 6\n        * unique: True\n        * null: False\n    - `nama` (TextField): Full name\n    - `keterangan` (TextField): Description of word class\n    \"\"\"\nid = CharField(max_length=6, unique=True, null=False)\nnama = TextField(null=False)\nketerangan = TextField(null=False)\ndef __repr__(self):\nreturn f\"&lt;models.GolonganKata id={self.id} nama='{self.nama}' keterangan='{self.keterangan}'&gt;\"\n</code></pre>"},{"location":"reference/models/core/konsep/#samudra.models.core.konsep.Konsep","title":"<code>Konsep</code>","text":"<p>         Bases: <code>BaseDataTable</code></p> <p>Concept model to list the meanings of words from <code>Lemma</code>.</p>"},{"location":"reference/models/core/konsep/#samudra.models.core.konsep.Konsep--fields","title":"Fields","text":"<ul> <li><code>lemma</code> (ForeignKeyField): foreign key to <code>Lemma</code>.<ul> <li>field: <code>Lemma.id</code></li> <li>backref: <code>Lemma.konsep</code></li> <li>on delete: \"cascade\"</li> </ul> </li> <li><code>golongan</code> (ForeignKeyField): foreign key to <code>GolonganKata</code>.<ul> <li>field: <code>GolonganKata.id</code></li> <li>backref: <code>GolonganKata.konsep</code></li> <li>on delete: set null</li> <li>null: True</li> </ul> </li> <li><code>keterangan</code> (TextField): the description of meaning.<ul> <li>null: True</li> <li>index: True</li> </ul> </li> <li><code>tertib</code> (IntegerField): the order in list of meaning to corresponding <code>Lemma</code><ul> <li>null: True</li> </ul> </li> </ul> Source code in <code>samudra/models/core/konsep.py</code> <pre><code>class Konsep(BaseDataTable):\n\"\"\"Concept model to list the meanings of words from [`Lemma`][samudra.models.core.lemma.Lemma].\n    ## Fields\n    - `lemma` (ForeignKeyField): foreign key to [`Lemma`][samudra.models.core.lemma.Lemma].\n        * field: `Lemma.id`\n        * backref: `Lemma.konsep`\n        * on delete: \"cascade\"\n    - `golongan` (ForeignKeyField): foreign key to [`GolonganKata`][samudra.models.core.konsep.GolonganKata].\n        * field: `GolonganKata.id`\n        * backref: `GolonganKata.konsep`\n        * on delete: set null\n        * null: True\n    - `keterangan` (TextField): the description of meaning.\n        * null: True\n        * index: True\n    - `tertib` (IntegerField): the order in list of meaning to corresponding [`Lemma`][samudra.models.core.lemma.Lemma]\n        * null: True\n    \"\"\"\nlemma = ForeignKeyField(\nmodel=Lemma, field=Lemma.id, backref=\"konsep\", on_delete=\"cascade\"\n)\n# TODO: Create composite key of id and tertib\ngolongan = ForeignKeyField(\nmodel=GolonganKata, field=GolonganKata.id, on_delete=\"set null\", null=True\n)\nketerangan = TextField(null=True, index=True)\n# ---\ntertib = IntegerField(null=True)\ndef __repr__(self):\nreturn f\"&lt;model.{self.__class__.__name__}: id={self.id} lemma={self.lemma} golongan={self.golongan} keterangan='{self.keterangan}'&gt;\"\ndef attach(\nself, to_model: BaseAttachmentDataTable, values: List[Dict[str, str]]\n) -&gt; ModelSelect:\n\"\"\"Get or Create attachment from self to `to_model` with the corresponding `values`.\n        Args:\n            to_model (BaseAttachmentDataTable): Attachment data table associated with the value.\n            values (List[Dict[str, str]]): Values to attach to `to_model`.\n        Returns:\n            pw.ModelSelect: List of attachment data associated with self.\n        \"\"\"\nreturn to_model.__attach__(self, values=values)\n</code></pre>"},{"location":"reference/models/core/konsep/#samudra.models.core.konsep.Konsep.attach","title":"<code>attach(to_model, values)</code>","text":"<p>Get or Create attachment from self to <code>to_model</code> with the corresponding <code>values</code>.</p> <p>Parameters:</p> Name Type Description Default <code>to_model</code> <code>BaseAttachmentDataTable</code> <p>Attachment data table associated with the value.</p> required <code>values</code> <code>List[Dict[str, str]]</code> <p>Values to attach to <code>to_model</code>.</p> required <p>Returns:</p> Type Description <code>ModelSelect</code> <p>pw.ModelSelect: List of attachment data associated with self.</p> Source code in <code>samudra/models/core/konsep.py</code> <pre><code>def attach(\nself, to_model: BaseAttachmentDataTable, values: List[Dict[str, str]]\n) -&gt; ModelSelect:\n\"\"\"Get or Create attachment from self to `to_model` with the corresponding `values`.\n    Args:\n        to_model (BaseAttachmentDataTable): Attachment data table associated with the value.\n        values (List[Dict[str, str]]): Values to attach to `to_model`.\n    Returns:\n        pw.ModelSelect: List of attachment data associated with self.\n    \"\"\"\nreturn to_model.__attach__(self, values=values)\n</code></pre>"},{"location":"reference/models/core/lemma/","title":"Lemma","text":""},{"location":"reference/models/core/lemma/#samudra.models.core.lemma.Lemma","title":"<code>Lemma</code>","text":"<p>         Bases: <code>BaseDataTable</code></p> <p>Word Entry model such that listed in the dictionary.</p>"},{"location":"reference/models/core/lemma/#samudra.models.core.lemma.Lemma--fields","title":"Fields","text":"<ul> <li><code>nama</code> (TextField): the word as displayed on a dictionary.<ul> <li>null: False</li> </ul> </li> </ul> Source code in <code>samudra/models/core/lemma.py</code> <pre><code>class Lemma(BaseDataTable):\n\"\"\"Word Entry model such that listed in the dictionary.\n    ## Fields\n    - `nama` (TextField): the word as displayed on a dictionary.\n        * null: False\n    \"\"\"\nnama = TextField(null=False)\ndef __repr__(self) -&gt; str:\nreturn f\"&lt;model.{self.__class__.__name__}: id={self.id} nama={self.nama}&gt;\"\n</code></pre>"},{"location":"reference/models/experimental/","title":"Index","text":"<p>\ud83e\uddea EXPERIMENTAL Models defined here are still experimental</p> <ul> <li>\ud83d\udcac Petikan</li> </ul>"},{"location":"reference/models/experimental/petikan/","title":"Petikan","text":""},{"location":"reference/models/experimental/petikan/#samudra.models.experimental.petikan.Petikan","title":"<code>Petikan</code>","text":"<p>         Bases: <code>BaseAttachmentDataTable</code></p> <p>\ud83e\uddea EXPERIMENTAL Sentence from sources that used the <code>Lemma</code> in the sense described by <code>Konsep</code>.</p> Source code in <code>samudra/models/experimental/petikan.py</code> <pre><code>class Petikan(BaseAttachmentDataTable):\n\"\"\"\ud83e\uddea EXPERIMENTAL Sentence from sources that used the [`Lemma`][samudra.models.core.lemma.Lemma] in the sense described by [`Konsep`][samudra.models.core.konsep.Konsep].\"\"\"\npetikan = TextField(null=False, index=True)\n# --&gt; Pautan ke SumberPetikan\nsumber = ForeignKeyField(\nmodel=SumberPetikan,\nfield=SumberPetikan.id,\nbackref=\"petikan\",\non_delete=\"set null\",\nnull=True,\n)\n</code></pre>"},{"location":"reference/models/experimental/petikan/#samudra.models.experimental.petikan.PetikanXKonsep","title":"<code>PetikanXKonsep</code>","text":"<p>         Bases: <code>BaseRelationshipTable</code></p> <p>\ud83e\uddea EXPERIMENTAL A many-to-many relationship between <code>Petikan</code> and <code>Konsep</code>.</p>"},{"location":"reference/models/experimental/petikan/#samudra.models.experimental.petikan.PetikanXKonsep--fields","title":"Fields","text":"<ul> <li><code>Petikan</code> (ForeignKeyField): foreign key to <code>Petikan</code>.<ul> <li>field: <code>Petikan.id</code></li> <li>backref: <code>Petikan.konsep</code></li> <li>on delete: cascade</li> </ul> </li> <li><code>konsep</code> (ForeignKeyField): foreign key to <code>Konsep</code>.<ul> <li>field: <code>Konsep.id</code></li> <li>backref: <code>Konsep.petikan</code></li> <li>on delete: cascade</li> </ul> </li> </ul> Source code in <code>samudra/models/experimental/petikan.py</code> <pre><code>class PetikanXKonsep(BaseRelationshipTable):\n\"\"\"\ud83e\uddea EXPERIMENTAL A many-to-many relationship between [`Petikan`][samudra.models.experimental.petikan.Petikan] and [`Konsep`][samudra.models.core.konsep.Konsep].\n    ## Fields\n    - `Petikan` (ForeignKeyField): foreign key to [`Petikan`][samudra.models.experimental.petikan.Petikan].\n        * field: `Petikan.id`\n        * backref: `Petikan.konsep`\n        * on delete: cascade\n    - `konsep` (ForeignKeyField): foreign key to [`Konsep`][samudra.models.core.konsep.Konsep].\n        * field: `Konsep.id`\n        * backref: `Konsep.petikan`\n        * on delete: cascade\n    \"\"\"\npetikan = ForeignKeyField(\nmodel=Petikan, field=Petikan.id, backref=\"konsep\", on_delete=\"cascade\"\n)\nkonsep = ForeignKeyField(\nmodel=Konsep, field=Konsep.id, backref=\"petikan\", on_delete=\"cascade\"\n)\n</code></pre>"},{"location":"reference/models/experimental/petikan/#samudra.models.experimental.petikan.SumberPetikan","title":"<code>SumberPetikan</code>","text":"<p>         Bases: <code>BaseDataTable</code></p> <p>\ud83e\uddea EXPERIMENTAL Source of the sentence in <code>Petikan</code>.</p> Source code in <code>samudra/models/experimental/petikan.py</code> <pre><code>class SumberPetikan(BaseDataTable):\n\"\"\"\ud83e\uddea EXPERIMENTAL Source of the sentence in [`Petikan`][samudra.models.experimental.petikan.Petikan].\"\"\"\ntajuk = TextField(null=False, index=True)\ntarikh = DateField()\n# ? Aku masih tak tahu macam mana nak uruskan metadata dari pelbagai jenis sumber\nmetadata = TextField(null=True)\n</code></pre>"}]}